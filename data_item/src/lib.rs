#![feature(proc_macro_hygiene, decl_macro)]
#[macro_use] extern crate rocket_contrib;
use rocket_contrib::databases::postgres;
use rocket::Route;


#[database("kittybox")]
pub struct KittyBox(postgres::Client);


pub trait DataItem {
    //
    // These functions/methods handle object parsing from and to database,
    // querying, creation, deletion and modification.
    //

    // Parse item from postgres type
    fn from_row(row: &postgres::Row) -> Self;
    // Query item from database by id and parse it
    fn from_id(c: &mut postgres::Client, id: u32) -> Result<Self, postgres::Error> where Self: Sized;

    // Query all objects from database (parsed)
    fn get_all(c: &mut postgres::Client) -> Vec<Self> where Self: Sized;
    // Query certain amount of object from database (parsed)
    fn get_page(c: &mut postgres::Client, page: u32, page_size: u32) -> Vec<Self> where Self: Sized;

    // Insert item into database, returns id
    fn insert(&self, c: &mut postgres::Client) -> u32;
    // Insert item into database by specific id, returns id
    fn insert_with_id(&self, c: &mut postgres::Client) -> Result<u32, postgres::Error>;
    // Put item into the database (create or update), returns id
    fn put(&self, c: &mut postgres::Client) -> u32;

    // Delete all objects but first count them, returns amount of deleted items
    fn delete_all(c: &mut postgres::Client) -> i64;
    // Delete an object with certain id, returns parsed object (as a struct)
    fn delete_with_id(c: &mut postgres::Client, id: u32) -> Result<Self, postgres::Error> where Self: Sized;

    //
    // Here we export endpoints. This function allows to return a prepared
    // vector of autogenerated functions to pass to the routes! macro,
    // avoiding confusion.
    //

    fn get_api_endpoints() -> Vec<Route>;
}
