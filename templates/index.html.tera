<!DOCTYPE html>
<html>
  <head>
    <title>Kitty-API</title>
    <!-- Metadata -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="apple-touch-icon" sizes="180x180" href="/static/meta/apple-touch-icon.png">
    <link rel="icon" type="image/x-icon" href="/static/meta/favicon.ico">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/meta/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/static/meta/favicon-16x16.png">
    <link rel="manifest" href="/static/meta/site.webmanifest">
    <!-- Stylesheet -->
    <link rel="stylesheet" href="/static/style.css">
  </head>
  <body>
    <div class="content-page">
      <pre class="content-main">
<b>USAGE</b>

    <b>Global parameters</b>:

        &lt;page&gt; - append integer (<span class="json-type">u64</span>) to endpoints that <b>state support
                 for it</b> in their description. As a result, you request
                 will be paginated. In response you will recieve some
                 additional info to the data, including <code>page_size</code>.

                  Examples:
                      - GET   /api/users?page=1

        &lt;delay&gt; - append integer in range 1-10 (min-max) to any
                  API request, so server will wait for &lt;delay&gt;
                  seconds before responding.

                  Examples:
                      - GET   /api/users/8?delay=1
                      - GET   /api/users?page=0&amp;delay=5
                      - POST  /api/accounts/register?delay=3

    <b>Users</b>:
        <i>Supports pagination.</i>

        GET /api/users

            retrieve all available users (without pagination).

        POST /api/users

            create new user with random ID (auto-increment)

            REQUEST
                <b>json:</b>
                    </code>{
                        <span class="json-string">"first_name"</span>: <span class="json-type">String</span>,
                        <span class="json-string">"last_name"</span>: <span class="json-type">String</span>,
                        <span class="json-string">"username"</span>: <span class="json-type">String</span>
                        <span class="json-string">"email"</span>: <span class="json-type">String</span>,
                        <span class="json-string">"age"</span>: <span class="json-type">u8</span>,
                        <span class="json-string">"picture"</span>: <span class="json-type">String</span>,
                        <span class="json-string">"active"</span>: <span class="json-type">bool</span>,
                    }</code>

            RESPONSE
                <b class="status-good">good</b>:
                        <span class="json-string">"msg_code"</span>: <span class="json-string">20002</span>,
                        <span class="json-string">"message"</span>: <span class="json-string">"Successfully created new user!"</span>,
                        <span class="json-string">"data"</span>: <span class="json-type">&lt;User object&gt;</span>
                    }</code>
                <b class="status-bad">bad</b>:
                    If server will fail to parse data from the request, it will return "Resource not found" error.

        DELETE /api/users

            remove all existing users

        GET /api/users/&lt;id&gt;

            retrieve a user with ID `&lt;id&gt;` (if exists).

        POST /api/users/&lt;id&gt;

            create new user with specific ID

        DELETE /api/users/&lt;id&gt;

            remove user with specific ID

    <b>Accounts</b>:

        POST /api/accounts/register

            REQUEST
                <b>json:</b>
                    <code>{
                        <span class="json-string">"email"</span>: <span class="json-type">String</span>,
                        <span class="json-string">"password"</span>: <span class="json-type">String</span>,
                    }</code>

            RESPONSE
                <b class="status-good">good</b>:
                    <code>{
                        <span class="json-string">"msg_code"</span>: <span class="json-string">20004</span>,
                        <span class="json-string">"message"</span>: <span class="json-string">"Registration success!"</span>,
                        <span class="json-string">"data"</span>: {
                            <span class="json-string">"session"</span>: <span class="json-type">&lt;String, 24&gt;</span>,
                            <span class="json-string">"creation_date"</span>: <span class="json-type">&lt;Current UTC Time&gt;</span>
                        }
                    }</code>
                <b class="status-bad">bad</b>:
                    <code>{ <span class="json-string">"msg_code"</span>: <span class="json-string">40004</span>, <span class="json-string">"message"</span>: <span class="json-string">"Email must not be empty!"</span> }
                    { <span class="json-string">"msg_code"</span>: <span class="json-string">40005</span>, <span class="json-string">"message"</span>: <span class="json-string">"Password must not be empty!"</span> }
                    { <span class="json-string">"msg_code"</span>: <span class="json-string">40006</span>, <span class="json-string">"message"</span>: <span class="json-string">"Password is too short! Minimum length is 8 symbols."</span> }
                    { <span class="json-string">"msg_code"</span>: <span class="json-string">40007</span>, <span class="json-string">"message"</span>: <span class="json-string">"Password is too long! Please use more practical length."</span> }
                    { <span class="json-string">"msg_code"</span>: <span class="json-string">40008</span>, <span class="json-string">"message"</span>: <span class="json-string">"User is already registered!"</span> }</code>

        POST /api/accounts/login

            REQUEST
                <b>json:</b>
                    <code>{
                        <span class="json-string">"email"</span>: <span class="json-type">String</span>,
                        <span class="json-string">"password"</span>: <span class="json-type">String</span>,
                    }</code>

            RESPONSE
                <b class="status-good">good</b>:
                    <code>{
                        <span class="json-string">"msg_code"</span>: <span class="json-string">20005</span>,
                        <span class="json-string">"message"</span>: <span class="json-string">"Login success!"</span>,
                        <span class="json-string">"data"</span>: {
                            <span class="json-string">"session"</span>: <span class="json-type">&lt;String, 24&gt;</span>,
                            <span class="json-string">"creation_date"</span>: <span class="json-type">&lt;Current UTC Time&gt;</span>
                        }
                    }</code>
                <b class="status-bad">bad</b>:
                    <code>{ <span class="json-string">"msg_code"</span>: <span class="json-string">40004</span>, <span class="json-string">"message"</span>: <span class="json-string">"Email must not be empty!"</span> }
                    { <span class="json-string">"msg_code"</span>: <span class="json-string">40005</span>, <span class="json-string">"message"</span>: <span class="json-string">"Password must not be empty!"</span> }
                    { <span class="json-string">"msg_code"</span>: <span class="json-string">40006</span>, <span class="json-string">"message"</span>: <span class="json-string">"Password is too short! Minimum length is 8 symbols."</span> }
                    { <span class="json-string">"msg_code"</span>: <span class="json-string">40007</span>, <span class="json-string">"message"</span>: <span class="json-string">"Password is too long! Please use more practical length."</span> }
                    { <span class="json-string">"msg_code"</span>: <span class="json-string">40009</span>, <span class="json-string">"message"</span>: <span class="json-string">"Account with such email does not exist!"</span> }
                    { <span class="json-string">"msg_code"</span>: <span class="json-string">40010</span>, <span class="json-string">"message"</span>: <span class="json-string">"Password is incorrect!"</span> }</code>

      </pre>
    </div>
  </body>
</html>
